spi_falcon: when setting up the clock, do not change the EBU clock but use it as input

--- a/drivers/spi/spi-falcon.c
+++ b/drivers/spi/spi-falcon.c
@@ -308,33 +308,32 @@ int falcon_sflash_xfer(struct spi_device
 
 static int falcon_sflash_setup(struct spi_device *spi)
 {
-	unsigned int i;
+	unsigned int i, ebuclk;
 	unsigned long flags;
+	struct device *dev = &spi->dev;
 
 	spin_lock_irqsave(&ebu_lock, flags);
 
-	if (spi->max_speed_hz >= CLOCK_100M) {
-		/* set EBU clock to 100 MHz */
-		ltq_sys1_w32_mask(0, EBUCC_EBUDIV_SELF100, EBUCC);
-		i = 1; /* divider */
-	} else {
-		/* set EBU clock to 50 MHz */
-		ltq_sys1_w32_mask(EBUCC_EBUDIV_SELF100, 0, EBUCC);
-
-		/* search for suitable divider */
-		for (i = 1; i < 7; i++) {
-			if (CLOCK_50M / i <= spi->max_speed_hz)
-				break;
-		}
+	if (ltq_sys1_r32(EBUCC) & EBUCC_EBUDIV_SELF100)
+		ebuclk = CLOCK_100M;
+	else
+		ebuclk = CLOCK_50M;
+
+	/* search for suitable divider */
+	for (i = 1; i < 7; i++) {
+		if (ebuclk / i <= spi->max_speed_hz)
+			break;
 	}
+	dev_dbg(dev, "max_speed is %d Hz, set speed to %d Hz\n", 
+		spi->max_speed_hz, ebuclk / i);
 
 	/* setup period of serial clock */
 	ltq_ebu_w32_mask(SFTIME_SCKF_POS_MASK
-		     | SFTIME_SCKR_POS_MASK
-		     | SFTIME_SCK_PER_MASK,
-		     (i << SFTIME_SCKR_POS_OFFSET)
-		     | (i << (SFTIME_SCK_PER_OFFSET + 1)),
-		     SFTIME);
+			| SFTIME_SCKR_POS_MASK
+			| SFTIME_SCK_PER_MASK,
+			(i << SFTIME_SCKR_POS_OFFSET)
+			| (i << (SFTIME_SCK_PER_OFFSET + 1)),
+			SFTIME);
 
 	/*
 	 * set some bits of unused_wd, to not trigger HOLD/WP
