From: John Crispin <blogic@openwrt.org>
Date: Thu, 29 Sep 2011 21:29:14 +0200
Subject: [PATCH 16/25] VPE softdog

--- /dev/null
+++ b/arch/mips/include/asm/mach-lantiq/softdog_vpe.h
@@ -0,0 +1,37 @@
+/*
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *   Copyright (C) 2005 infineon
+ *   Copyright (C) 2007 John Crispin <blogic@openwrt.org>
+ *
+ */
+#ifndef _SOFTDOG_VPE_H__
+#define _SOFTDOG_VPE_H__
+
+typedef int (*VPE_SW_WDOG_RESET)(unsigned long wdog_cleared_ok_count);
+
+#ifdef CONFIG_VPE_SOFTDOG
+unsigned long vpe1_sw_wdog_start(unsigned long);
+unsigned long vpe1_sw_wdog_stop(unsigned long);
+
+int32_t vpe1_sw_wdog_register_reset_handler(VPE_SW_WDOG_RESET reset_fn);
+#else
+static inline unsigned long vpe1_sw_wdog_start(unsigned long flags) { return 0; }
+static inline unsigned long vpe1_sw_wdog_stop(unsigned long flags) { return 0; }
+
+static inline int32_t vpe1_sw_wdog_register_reset_handler(VPE_SW_WDOG_RESET reset_fn) { return 0; }
+#endif
+
+#endif
--- a/arch/mips/lantiq/Kconfig
+++ b/arch/mips/lantiq/Kconfig
@@ -52,4 +52,8 @@ config XRX200_PHY_FW
 	bool "XRX200 PHY firmware loader"
 	depends on SOC_XWAY
 
+config VPE_SOFTDOG
+	bool "VPE1 watchdog"
+	depends on MIPS_VPE_LOADER
+
 endif
--- a/arch/mips/lantiq/Makefile
+++ b/arch/mips/lantiq/Makefile
@@ -7,6 +7,7 @@
 obj-y := irq.o clk.o prom.o
 
 obj-$(CONFIG_EARLY_PRINTK) += early_printk.o
+obj-$(CONFIG_VPE_SOFTDOG) += softdog_vpe.o
 
 obj-$(CONFIG_SOC_TYPE_XWAY) += xway/
 obj-$(CONFIG_SOC_FALCON) += falcon/
--- /dev/null
+++ b/arch/mips/lantiq/softdog_vpe.c
@@ -0,0 +1,124 @@
+/*
+** =============================================================================
+** FILE NAME     : softdog_vpe.c
+** MODULES       : LXDB
+** DATE          : 24-03-2008
+** AUTHOR        : LXDB Team
+** DESCRIPTION   : This header file contains the code for the watchdog
+**                 implementation on vpe1 side.
+** REFERENCES    :
+** COPYRIGHT     : Copyright (c) 2008
+**                 Am Campeon 1-12, 85579 Neubiberg, Germany
+**
+** HISTORY       :
+** $Date   $Author    $Comment
+** 24-03-2008   LXDB    Initial version
+** ============================================================================
+*/
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/types.h>
+#include <linux/timer.h>
+#include <linux/reboot.h>
+#include <linux/init.h>
+#include <linux/jiffies.h>
+
+#include <softdog_vpe.h>
+
+static unsigned long last_wdog_value;
+static unsigned long vpe1_wdog_cleared;
+
+static unsigned long vpe1_wdog_dead;
+static void watchdog_vpe0_fire(unsigned long); /* Called when vpe0 timer expires */
+static void keep_alive_vpe0(unsigned long);
+VPE_SW_WDOG_RESET reset_local_fn;
+
+uint32_t vpe1_wdog_ctr;
+uint32_t vpe1_wdog_timeout;
+EXPORT_SYMBOL(vpe1_wdog_ctr);
+EXPORT_SYMBOL(vpe1_wdog_timeout);
+
+static int __init wdog_ctr(char *str)
+{
+	get_option(&str, &vpe1_wdog_ctr);
+	return 1;
+}
+__setup("vpe1_wdog_ctr_addr=", wdog_ctr);
+
+static int __init wdog_timeout(char *str)
+{
+	get_option(&str, &vpe1_wdog_timeout);
+	return 1;
+}
+__setup("vpe1_wdog_timeout=", wdog_timeout);
+
+static struct timer_list watchdog_vpe0_ticktock =
+                TIMER_INITIALIZER(watchdog_vpe0_fire, 0, 0);
+
+static void watchdog_vpe0_fire (unsigned long flags)
+{
+	volatile unsigned long *wdog_ctr_value;
+	wdog_ctr_value = (void*)vpe1_wdog_ctr;
+	if (*wdog_ctr_value == last_wdog_value) { /* VPE1 watchdog expiry handling */
+		vpe1_sw_wdog_stop(flags);
+		vpe1_wdog_dead++;
+		printk(KERN_DEBUG "VPE1 watchdog reset handler called\n");
+	/* Call the reset handler function */
+		reset_local_fn(flags);
+	} else { /* Everything is OK on vpe1 side. Continue. */
+		last_wdog_value = *wdog_ctr_value;
+		vpe1_wdog_cleared++;
+		keep_alive_vpe0(flags);
+	}
+}
+
+int32_t vpe1_sw_wdog_register_reset_handler (VPE_SW_WDOG_RESET reset_fn)
+{
+	reset_local_fn = (VPE_SW_WDOG_RESET)reset_fn;
+	return 0;
+}
+
+static void keep_alive_vpe0(unsigned long flags)
+{
+	mod_timer(&watchdog_vpe0_ticktock, jiffies+ vpe1_wdog_timeout );
+}
+
+unsigned long vpe1_sw_wdog_start(unsigned long flags)
+{
+	volatile unsigned long *wdog_ctr_value;
+	wdog_ctr_value = (void*)vpe1_wdog_ctr;
+	*wdog_ctr_value = 0;
+	last_wdog_value = 0;
+	keep_alive_vpe0(flags);
+	return 0;
+}
+
+unsigned long vpe1_sw_wdog_stop(unsigned long flags)
+{
+	del_timer(&watchdog_vpe0_ticktock);
+	return 0;
+}
+
+static int __init watchdog_vpe1_init(void)
+{
+	/* Nothing to be done here */
+	return 0;
+}
+
+static void __exit watchdog_vpe1_exit(void)
+{
+	unsigned long flags=0;
+	vpe1_sw_wdog_stop(flags);
+}
+
+module_init(watchdog_vpe1_init);
+module_exit(watchdog_vpe1_exit);
+
+EXPORT_SYMBOL(vpe1_sw_wdog_register_reset_handler);
+EXPORT_SYMBOL(vpe1_sw_wdog_start);
+EXPORT_SYMBOL(vpe1_sw_wdog_stop);
+
+MODULE_AUTHOR("LXDB");
+MODULE_DESCRIPTION("Software Watchdog For VPE1");
+MODULE_LICENSE("GPL");
