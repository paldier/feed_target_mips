gpio-falcon: use and prefer entries from "aliases" as bank number

--- a/drivers/gpio/gpio-falcon.c
+++ b/drivers/gpio/gpio-falcon.c
@@ -246,17 +246,25 @@ static int falcon_gpio_probe(struct plat
 {
 	struct pinctrl_gpio_range *gpio_range;
 	struct device_node *node = pdev->dev.of_node;
-	const __be32 *bank = of_get_property(node, "lantiq,bank", NULL);
+	uint32_t bank;
 	struct falcon_gpio_port *gpio_port;
 	struct resource *gpiores, irqres;
 	int ret, size;
 
-	if (!bank || *bank >= MAX_BANKS)
+	ret = of_alias_get_id(node, "gpio");
+	if (ret >= 0) {
+		bank = ret;
+	} else {
+		if (of_property_read_u32(node, "lantiq,bank", &bank))
+			return -ENODEV;
+	}
+
+	if (bank >= MAX_BANKS)
 		return -ENODEV;
 
-	size = pinctrl_falcon_get_range_size(*bank);
+	size = pinctrl_falcon_get_range_size(bank);
 	if (size < 1) {
-		dev_err(&pdev->dev, "pad not loaded for bank %d\n", *bank);
+		dev_err(&pdev->dev, "pad not loaded for bank %d\n", bank);
 		return size;
 	}
 
@@ -270,7 +278,7 @@ static int falcon_gpio_probe(struct plat
 	if (!gpio_port)
 		return -ENOMEM;
 
-	snprintf(gpio_port->name, 6, "gpio%d", *bank);
+	snprintf(gpio_port->name, 6, "gpio%d", bank);
 	gpio_port->gpio_chip.label = gpio_port->name;
 	gpio_port->gpio_chip.direction_input = falcon_gpio_direction_input;
 	gpio_port->gpio_chip.direction_output = falcon_gpio_direction_output;
@@ -278,7 +286,7 @@ static int falcon_gpio_probe(struct plat
 	gpio_port->gpio_chip.set = falcon_gpio_set;
 	gpio_port->gpio_chip.request = falcon_gpio_request;
 	gpio_port->gpio_chip.free = falcon_gpio_free;
-	gpio_port->gpio_chip.base = *bank * PINS_PER_PORT;
+	gpio_port->gpio_chip.base = bank * PINS_PER_PORT;
 	gpio_port->gpio_chip.ngpio = size;
 	gpio_port->gpio_chip.parent = &pdev->dev;
 
@@ -309,7 +317,7 @@ static int falcon_gpio_probe(struct plat
 	platform_set_drvdata(pdev, gpio_port);
 
 	gpio_range->name = "FALCON GPIO";
-	gpio_range->id = *bank;
+	gpio_range->id = bank;
 	gpio_range->base = gpio_port->gpio_chip.base;
 	gpio_range->pin_base = gpio_port->gpio_chip.base;
 	gpio_range->npins = gpio_port->gpio_chip.ngpio;
