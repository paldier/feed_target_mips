gpio-falcon: don't use a fixed irq_base, use dynamic number assignment

--- a/drivers/gpio/gpio-falcon.c
+++ b/drivers/gpio/gpio-falcon.c
@@ -64,7 +64,7 @@
 struct falcon_gpio_port {
 	struct gpio_chip gpio_chip;
 	void __iomem *port;
-	unsigned int irq_base;
+	struct irq_domain *domain;
 	unsigned int chained_irq;
 	struct clk *clk;
 	char name[6];
@@ -122,33 +122,33 @@ static void falcon_gpio_free(struct gpio
 
 static int falcon_gpio_to_irq(struct gpio_chip *chip, unsigned offset)
 {
-	return ctop(chip)->irq_base + offset;
+	return irq_create_mapping(ctop(chip)->domain, offset);
 }
 
 static void falcon_gpio_disable_irq(struct irq_data *d)
 {
-	unsigned int offset = d->irq - itop(d)->irq_base;
+	unsigned int offset = d->hwirq;
 
 	port_w32(itop(d), 1 << offset, GPIO_IRNENCLR);
 }
 
 static void falcon_gpio_enable_irq(struct irq_data *d)
 {
-	unsigned int offset = d->irq - itop(d)->irq_base;
+	unsigned int offset = d->hwirq;
 
 	port_w32(itop(d), 1 << offset, GPIO_IRNRNSET);
 }
 
 static void falcon_gpio_ack_irq(struct irq_data *d)
 {
-	unsigned int offset = d->irq - itop(d)->irq_base;
+	unsigned int offset = d->hwirq;
 
 	port_w32(itop(d), 1 << offset, GPIO_IRNCR);
 }
 
 static void falcon_gpio_mask_and_ack_irq(struct irq_data *d)
 {
-	unsigned int offset = d->irq - itop(d)->irq_base;
+	unsigned int offset = d->hwirq;
 
 	port_w32(itop(d), 1 << offset, GPIO_IRNENCLR);
 	port_w32(itop(d), 1 << offset, GPIO_IRNCR);
@@ -156,7 +156,7 @@ static void falcon_gpio_mask_and_ack_irq
 
 static int falcon_gpio_irq_type(struct irq_data *d, unsigned int type)
 {
-	unsigned int offset = d->irq - itop(d)->irq_base;
+	unsigned int offset = d->hwirq;
 	unsigned int mask = 1 << offset;
 
 	if ((type & IRQ_TYPE_SENSE_MASK) == IRQ_TYPE_NONE)
@@ -166,12 +166,12 @@ static int falcon_gpio_irq_type(struct i
 		/* level triggered */
 		port_w32_mask(itop(d), 0, mask, GPIO_IRNCFG);
 		irq_set_chip_and_handler_name(d->irq,
-			&falcon_gpio_irq_chip, handle_level_irq, "mux");
+			&falcon_gpio_irq_chip, handle_level_irq, "level");
 	} else {
 		/* edge triggered */
 		port_w32_mask(itop(d), mask, 0, GPIO_IRNCFG);
 		irq_set_chip_and_handler_name(d->irq,
-			&falcon_gpio_irq_chip, handle_simple_irq, "mux");
+			&falcon_gpio_irq_chip, handle_simple_irq, "edge");
 	}
 
 	if ((type & IRQ_TYPE_EDGE_BOTH) == IRQ_TYPE_EDGE_BOTH) {
@@ -194,7 +194,7 @@ static void falcon_gpio_irq_handler(stru
 {
 	struct falcon_gpio_port *gpio_port = irq_desc_get_handler_data(desc);
 	unsigned long irncr;
-	int offset;
+	int offset, child_irq;
 
 	/* acknowledge interrupt */
 	irncr = port_r32(gpio_port, GPIO_IRNCR);
@@ -202,8 +202,11 @@ static void falcon_gpio_irq_handler(stru
 
 	desc->irq_data.chip->irq_ack(&desc->irq_data);
 
-	for_each_set_bit(offset, &irncr, gpio_port->gpio_chip.ngpio)
-		generic_handle_irq(gpio_port->irq_base + offset);
+	for_each_set_bit(offset, &irncr, gpio_port->gpio_chip.ngpio) {
+		child_irq = irq_find_mapping(gpio_port->domain, offset);
+		if (child_irq)
+			generic_handle_irq(child_irq);
+	}
 }
 
 static int falcon_gpio_irq_map(struct irq_domain *d, unsigned int irq,
@@ -212,7 +215,7 @@ static int falcon_gpio_irq_map(struct ir
 	struct falcon_gpio_port *port = d->host_data;
 
 	irq_set_chip_and_handler_name(irq, &falcon_gpio_irq_chip,
-			handle_simple_irq, "mux");
+				      handle_simple_irq, port->name);
 	irq_set_chip_data(irq, port);
 
 	/* set to negative logic (falling edge, low level) */
@@ -221,7 +224,7 @@ static int falcon_gpio_irq_map(struct ir
 }
 
 static struct irq_chip falcon_gpio_irq_chip = {
-	.name = "gpio_irq_mux",
+	.name = "gpio-falcon",
 	.irq_mask = falcon_gpio_disable_irq,
 	.irq_unmask = falcon_gpio_enable_irq,
 	.irq_ack = falcon_gpio_ack_irq,
@@ -290,10 +293,9 @@ static int falcon_gpio_probe(struct plat
 	clk_activate(gpio_port->clk);
 
 	if (of_irq_to_resource_table(node, &irqres, 1) == 1) {
-		gpio_port->irq_base = INT_NUM_EXTRA_START + (32 * *bank);
 		gpio_port->gpio_chip.to_irq = falcon_gpio_to_irq;
 		gpio_port->chained_irq = irqres.start;
-		irq_domain_add_legacy(node, size, gpio_port->irq_base, 0,
+		gpio_port->domain = irq_domain_add_simple(node, size, 0,
 					&irq_domain_ops, gpio_port);
 		setup_irq(irqres.start, &gpio_cascade);
 		irq_set_handler_data(irqres.start, gpio_port);
