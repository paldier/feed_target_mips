--- a/drivers/pinctrl/pinctrl-falcon.c
+++ b/drivers/pinctrl/pinctrl-falcon.c
@@ -272,7 +272,10 @@ static int falcon_pinconf_get(struct pin
 			*config = LTQ_PINCONF_PACK(param, 0);
 
 		break;
-
+	case LTQ_PINCONF_PARAM_MUX:
+		*config = LTQ_PINCONF_PACK(param,
+			  pad_r32(mem, LTQ_PADC_MUX(PORT_PIN(pin))) & 0xFFFF);
+		break;
 	default:
 		return -ENOTSUPP;
 	}
@@ -289,7 +292,7 @@ static int falcon_pinconf_set(struct pin
 	struct ltq_pinmux_info *info = pinctrl_dev_get_drvdata(pctrldev);
 	void __iomem *mem = info->membase[PORT(pin)];
 	u32 reg;
-	int i;
+	int i,ret;
 
 	for (i = 0; i < num_configs; i++) {
 		param = LTQ_PINCONF_UNPACK_PARAM(configs[i]);
@@ -298,10 +301,16 @@ static int falcon_pinconf_set(struct pin
 		switch (param) {
 		case LTQ_PINCONF_PARAM_DRIVE_CURRENT:
 			reg = LTQ_PADC_DCC;
+			pad_w32(mem, BIT(PORT_PIN(pin)), reg);
+			if (!(pad_r32(mem, reg) & BIT(PORT_PIN(pin))))
+				return -ENOTSUPP;			
 			break;
 
 		case LTQ_PINCONF_PARAM_SLEW_RATE:
 			reg = LTQ_PADC_SRC;
+			pad_w32(mem, BIT(PORT_PIN(pin)), reg);
+			if (!(pad_r32(mem, reg) & BIT(PORT_PIN(pin))))
+				return -ENOTSUPP;
 			break;
 
 		case LTQ_PINCONF_PARAM_PULL:
@@ -309,17 +318,49 @@ static int falcon_pinconf_set(struct pin
 				reg = LTQ_PADC_PDEN;
 			else
 				reg = LTQ_PADC_PUEN;
+			pad_w32(mem, BIT(PORT_PIN(pin)), reg);
+			if (!(pad_r32(mem, reg) & BIT(PORT_PIN(pin))))
+				return -ENOTSUPP;
+			break;
+		case LTQ_PINCONF_PARAM_MUX:
+			if (arg >= LTQ_MAX_MUX) {
+				pr_err("%s: Invalid config arg %04x for param %04x\n",
+					pinctrl_dev_get_name(pctrldev), arg, param);
+				return -ENOTSUPP;
+			}
+			pad_w32(mem, arg, LTQ_PADC_MUX(PORT_PIN(pin)));
+			break;
+		case LTQ_PINCONF_PARAM_OUTPUT:
+			ret = gpio_request(pin, NULL);
+			if (ret) {
+				pr_err("%s: Pin %u request failed, %d\n",
+					pinctrl_dev_get_name(pctrldev), pin, ret);
+				return ret;
+			}
+			ret = gpio_direction_output(pin, arg & 0x1);
+			if (ret)
+				pr_err("%s: Pin %u output direction set failed, %d\n",
+					pinctrl_dev_get_name(pctrldev), pin, ret);
+			gpio_free(pin);
+			break;
+		case LTQ_PINCONF_PARAM_INPUT:
+			ret = gpio_request(pin, NULL);
+			if (ret) {
+				pr_err("%s: Pin %u request failed, %d\n",
+					pinctrl_dev_get_name(pctrldev), pin, ret);
+				return ret;
+			}
+			ret = gpio_direction_input(pin);
+			if (ret)
+				pr_err("%s: Pin %u input direction set failed, %d\n",
+					pinctrl_dev_get_name(pctrldev), pin, ret);
+			gpio_free(pin);
 			break;
-
 		default:
 			pr_err("%s: Invalid config param %04x\n",
 			pinctrl_dev_get_name(pctrldev), param);
 			return -ENOTSUPP;
 		}
-
-		pad_w32(mem, BIT(PORT_PIN(pin)), reg);
-		if (!(pad_r32(mem, reg) & BIT(PORT_PIN(pin))))
-			return -ENOTSUPP;
 	} /* for each config */
 
 	return 0;
@@ -399,6 +440,9 @@ static const struct ltq_cfg_param falcon
 	{"lantiq,pull",			LTQ_PINCONF_PARAM_PULL},
 	{"lantiq,drive-current",	LTQ_PINCONF_PARAM_DRIVE_CURRENT},
 	{"lantiq,slew-rate",		LTQ_PINCONF_PARAM_SLEW_RATE},
+	{"lantiq,output",		LTQ_PINCONF_PARAM_OUTPUT},
+	{"lantiq,input",		LTQ_PINCONF_PARAM_INPUT},
+	{"lantiq,mux",			LTQ_PINCONF_PARAM_MUX},
 };
 
 static struct ltq_pinmux_info falcon_info = {
--- a/drivers/pinctrl/pinctrl-lantiq.h
+++ b/drivers/pinctrl/pinctrl-lantiq.h
@@ -36,6 +36,8 @@ enum ltq_pinconf_param {
 	LTQ_PINCONF_PARAM_DRIVE_CURRENT,
 	LTQ_PINCONF_PARAM_SLEW_RATE,
 	LTQ_PINCONF_PARAM_OUTPUT,
+	LTQ_PINCONF_PARAM_INPUT,
+	LTQ_PINCONF_PARAM_MUX,
 };
 
 struct ltq_cfg_param {
